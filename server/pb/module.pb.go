// Code generated by protoc-gen-go. DO NOT EDIT.
// source: module.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LifecycleRequest_Req int32

const (
	LifecycleRequest_CONNECT LifecycleRequest_Req = 0
	LifecycleRequest_TERM    LifecycleRequest_Req = 1
	LifecycleRequest_PING    LifecycleRequest_Req = 2
	LifecycleRequest_PONG    LifecycleRequest_Req = 3
)

var LifecycleRequest_Req_name = map[int32]string{
	0: "CONNECT",
	1: "TERM",
	2: "PING",
	3: "PONG",
}

var LifecycleRequest_Req_value = map[string]int32{
	"CONNECT": 0,
	"TERM":    1,
	"PING":    2,
	"PONG":    3,
}

func (x LifecycleRequest_Req) String() string {
	return proto.EnumName(LifecycleRequest_Req_name, int32(x))
}

func (LifecycleRequest_Req) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{0, 0}
}

type LifecycleRequest struct {
	RequestType LifecycleRequest_Req `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.LifecycleRequest_Req" json:"requestType,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*LifecycleRequest_ConnectMsg
	Msg                  isLifecycleRequest_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LifecycleRequest) Reset()         { *m = LifecycleRequest{} }
func (m *LifecycleRequest) String() string { return proto.CompactTextString(m) }
func (*LifecycleRequest) ProtoMessage()    {}
func (*LifecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{0}
}

func (m *LifecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LifecycleRequest.Unmarshal(m, b)
}
func (m *LifecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LifecycleRequest.Marshal(b, m, deterministic)
}
func (m *LifecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifecycleRequest.Merge(m, src)
}
func (m *LifecycleRequest) XXX_Size() int {
	return xxx_messageInfo_LifecycleRequest.Size(m)
}
func (m *LifecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LifecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LifecycleRequest proto.InternalMessageInfo

func (m *LifecycleRequest) GetRequestType() LifecycleRequest_Req {
	if m != nil {
		return m.RequestType
	}
	return LifecycleRequest_CONNECT
}

type isLifecycleRequest_Msg interface {
	isLifecycleRequest_Msg()
}

type LifecycleRequest_ConnectMsg struct {
	ConnectMsg *Connect `protobuf:"bytes,2,opt,name=connectMsg,proto3,oneof"`
}

func (*LifecycleRequest_ConnectMsg) isLifecycleRequest_Msg() {}

func (m *LifecycleRequest) GetMsg() isLifecycleRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *LifecycleRequest) GetConnectMsg() *Connect {
	if x, ok := m.GetMsg().(*LifecycleRequest_ConnectMsg); ok {
		return x.ConnectMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifecycleRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifecycleRequest_OneofMarshaler, _LifecycleRequest_OneofUnmarshaler, _LifecycleRequest_OneofSizer, []interface{}{
		(*LifecycleRequest_ConnectMsg)(nil),
	}
}

func _LifecycleRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifecycleRequest)
	// msg
	switch x := m.Msg.(type) {
	case *LifecycleRequest_ConnectMsg:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LifecycleRequest.Msg has unexpected type %T", x)
	}
	return nil
}

func _LifecycleRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifecycleRequest)
	switch tag {
	case 2: // msg.connectMsg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Connect)
		err := b.DecodeMessage(msg)
		m.Msg = &LifecycleRequest_ConnectMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LifecycleRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifecycleRequest)
	// msg
	switch x := m.Msg.(type) {
	case *LifecycleRequest_ConnectMsg:
		s := proto.Size(x.ConnectMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Connect message sent from the module to the server to notify the
// grpc port listening on the module to receive requests along with the
// module name.
type Connect struct {
	Port                 int32    `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connect) Reset()         { *m = Connect{} }
func (m *Connect) String() string { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()    {}
func (*Connect) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{1}
}

func (m *Connect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connect.Unmarshal(m, b)
}
func (m *Connect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connect.Marshal(b, m, deterministic)
}
func (m *Connect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connect.Merge(m, src)
}
func (m *Connect) XXX_Size() int {
	return xxx_messageInfo_Connect.Size(m)
}
func (m *Connect) XXX_DiscardUnknown() {
	xxx_messageInfo_Connect.DiscardUnknown(m)
}

var xxx_messageInfo_Connect proto.InternalMessageInfo

func (m *Connect) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// ModuleWorkRequest selects a module to call, and sends a request to that module.
type ModuleWorkRequest struct {
	// Name of the module to call
	ModuleName string `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	// Request contains the function name to call, and the parameters to the function
	Req                  *Request `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleWorkRequest) Reset()         { *m = ModuleWorkRequest{} }
func (m *ModuleWorkRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleWorkRequest) ProtoMessage()    {}
func (*ModuleWorkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{2}
}

func (m *ModuleWorkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModuleWorkRequest.Unmarshal(m, b)
}
func (m *ModuleWorkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModuleWorkRequest.Marshal(b, m, deterministic)
}
func (m *ModuleWorkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleWorkRequest.Merge(m, src)
}
func (m *ModuleWorkRequest) XXX_Size() int {
	return xxx_messageInfo_ModuleWorkRequest.Size(m)
}
func (m *ModuleWorkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleWorkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleWorkRequest proto.InternalMessageInfo

func (m *ModuleWorkRequest) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *ModuleWorkRequest) GetReq() *Request {
	if m != nil {
		return m.Req
	}
	return nil
}

// LogRequest has the host id and log msg
type LogRequest struct {
	Session              string   `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	HostId               string   `protobuf:"bytes,2,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{3}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *LogRequest) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *LogRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Configuration request, using a json pointer
type CfgRequest struct {
	Session              string   `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	HostId               string   `protobuf:"bytes,2,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CfgRequest) Reset()         { *m = CfgRequest{} }
func (m *CfgRequest) String() string { return proto.CompactTextString(m) }
func (*CfgRequest) ProtoMessage()    {}
func (*CfgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{4}
}

func (m *CfgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CfgRequest.Unmarshal(m, b)
}
func (m *CfgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CfgRequest.Marshal(b, m, deterministic)
}
func (m *CfgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CfgRequest.Merge(m, src)
}
func (m *CfgRequest) XXX_Size() int {
	return xxx_messageInfo_CfgRequest.Size(m)
}
func (m *CfgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CfgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CfgRequest proto.InternalMessageInfo

func (m *CfgRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *CfgRequest) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *CfgRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Configuration response, contains JSON document. If the variable is not found, contains
// nil (empty array)
type CfgResponse struct {
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CfgResponse) Reset()         { *m = CfgResponse{} }
func (m *CfgResponse) String() string { return proto.CompactTextString(m) }
func (*CfgResponse) ProtoMessage()    {}
func (*CfgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{5}
}

func (m *CfgResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CfgResponse.Unmarshal(m, b)
}
func (m *CfgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CfgResponse.Marshal(b, m, deterministic)
}
func (m *CfgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CfgResponse.Merge(m, src)
}
func (m *CfgResponse) XXX_Size() int {
	return xxx_messageInfo_CfgResponse.Size(m)
}
func (m *CfgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CfgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CfgResponse proto.InternalMessageInfo

func (m *CfgResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoadModuleRequest struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadModuleRequest) Reset()         { *m = LoadModuleRequest{} }
func (m *LoadModuleRequest) String() string { return proto.CompactTextString(m) }
func (*LoadModuleRequest) ProtoMessage()    {}
func (*LoadModuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{6}
}

func (m *LoadModuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadModuleRequest.Unmarshal(m, b)
}
func (m *LoadModuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadModuleRequest.Marshal(b, m, deterministic)
}
func (m *LoadModuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadModuleRequest.Merge(m, src)
}
func (m *LoadModuleRequest) XXX_Size() int {
	return xxx_messageInfo_LoadModuleRequest.Size(m)
}
func (m *LoadModuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadModuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadModuleRequest proto.InternalMessageInfo

func (m *LoadModuleRequest) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

type LoadModuleResponse struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadModuleResponse) Reset()         { *m = LoadModuleResponse{} }
func (m *LoadModuleResponse) String() string { return proto.CompactTextString(m) }
func (*LoadModuleResponse) ProtoMessage()    {}
func (*LoadModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{7}
}

func (m *LoadModuleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadModuleResponse.Unmarshal(m, b)
}
func (m *LoadModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadModuleResponse.Marshal(b, m, deterministic)
}
func (m *LoadModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadModuleResponse.Merge(m, src)
}
func (m *LoadModuleResponse) XXX_Size() int {
	return xxx_messageInfo_LoadModuleResponse.Size(m)
}
func (m *LoadModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadModuleResponse proto.InternalMessageInfo

func (m *LoadModuleResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Request is a request sent to a function implemented by a module.
type Request struct {
	// The current session ID
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// The function to call in the module
	FuncName string `protobuf:"bytes,2,opt,name=funcName,proto3" json:"funcName,omitempty"`
	// A JSON document describing the parameters to the function. The structure
	// of the JSON document depends on the function.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{8}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *Request) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Response is returned from a module function. If the module function
// executes but the result is an error, then the errorMsg field contains
// that error, but the call returns success. If somehow the module
// function cannot be called, or if the module function encounters an
// error that prevents execution, that is returned as error from the function
type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FuncName             string   `protobuf:"bytes,2,opt,name=funcName,proto3" json:"funcName,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Modified             bool     `protobuf:"varint,4,opt,name=modified,proto3" json:"modified,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae7704718fb7daeb, []int{9}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *Response) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *Response) GetModified() bool {
	if m != nil {
		return m.Modified
	}
	return false
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.LifecycleRequest_Req", LifecycleRequest_Req_name, LifecycleRequest_Req_value)
	proto.RegisterType((*LifecycleRequest)(nil), "pb.LifecycleRequest")
	proto.RegisterType((*Connect)(nil), "pb.Connect")
	proto.RegisterType((*ModuleWorkRequest)(nil), "pb.ModuleWorkRequest")
	proto.RegisterType((*LogRequest)(nil), "pb.LogRequest")
	proto.RegisterType((*CfgRequest)(nil), "pb.CfgRequest")
	proto.RegisterType((*CfgResponse)(nil), "pb.CfgResponse")
	proto.RegisterType((*LoadModuleRequest)(nil), "pb.LoadModuleRequest")
	proto.RegisterType((*LoadModuleResponse)(nil), "pb.LoadModuleResponse")
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
}

func init() { proto.RegisterFile("module.proto", fileDescriptor_ae7704718fb7daeb) }

var fileDescriptor_ae7704718fb7daeb = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0xe6, 0x36, 0xa9, 0x8a, 0xbb, 0x82, 0xca, 0xb2, 0x54, 0x54, 0x2c, 0x1e, 0x8a,
	0x10, 0x4e, 0x09, 0x2f, 0x5c, 0xde, 0x6a, 0x55, 0xa5, 0x52, 0x92, 0x46, 0x4b, 0x25, 0x24, 0xde,
	0x7c, 0xd9, 0xa4, 0x16, 0xb6, 0xd7, 0xd9, 0x5d, 0x17, 0xe5, 0x1f, 0xf8, 0x0f, 0xfe, 0x80, 0xef,
	0x43, 0xde, 0x5d, 0x3b, 0xa6, 0xad, 0xca, 0x03, 0x6f, 0x73, 0xc6, 0xb3, 0x67, 0xce, 0xd9, 0x9d,
	0x31, 0xec, 0x65, 0x34, 0x2e, 0x53, 0xe2, 0x15, 0x8c, 0x0a, 0x8a, 0x3a, 0x45, 0xe8, 0x8c, 0x48,
	0x56, 0x88, 0x8d, 0x4a, 0xb8, 0xbf, 0x0d, 0xb0, 0xa6, 0xc9, 0x92, 0x44, 0x9b, 0x28, 0x25, 0x98,
	0xac, 0x4b, 0xc2, 0x05, 0xfa, 0x08, 0x23, 0xa6, 0xc2, 0xeb, 0x4d, 0x41, 0x6c, 0xe3, 0xd8, 0x38,
	0xd9, 0x9f, 0xd8, 0x5e, 0x11, 0x7a, 0x77, 0x4b, 0x3d, 0x4c, 0xd6, 0xb8, 0x5d, 0x8c, 0xde, 0x00,
	0x44, 0x34, 0xcf, 0x49, 0x24, 0x66, 0x7c, 0x65, 0x77, 0x8e, 0x8d, 0x93, 0xd1, 0x64, 0x54, 0x1d,
	0xf5, 0x55, 0xf6, 0xf3, 0x0e, 0x6e, 0x15, 0xb8, 0xa7, 0x60, 0x62, 0xb2, 0x46, 0x23, 0xe8, 0xfb,
	0x57, 0xf3, 0xf9, 0xb9, 0x7f, 0x6d, 0xed, 0xa0, 0x01, 0xec, 0x5e, 0x9f, 0xe3, 0x99, 0x65, 0x54,
	0xd1, 0xe2, 0x72, 0x7e, 0x61, 0x75, 0x64, 0x74, 0x35, 0xbf, 0xb0, 0xcc, 0xb3, 0x2e, 0x98, 0x19,
	0x5f, 0xb9, 0x47, 0xd0, 0xd7, 0x8c, 0x08, 0xc1, 0x6e, 0x41, 0x99, 0x90, 0x3a, 0xbb, 0x58, 0xc6,
	0x2e, 0x86, 0x83, 0x99, 0x34, 0xfe, 0x95, 0xb2, 0xef, 0xb5, 0xaf, 0xe7, 0x00, 0xea, 0x36, 0xe6,
	0x41, 0xa6, 0x6c, 0x0d, 0x71, 0x2b, 0x83, 0x8e, 0xc0, 0x64, 0x64, 0xdd, 0x16, 0xad, 0x4f, 0xe2,
	0x2a, 0xef, 0x2e, 0x00, 0xa6, 0x74, 0x55, 0x93, 0xd9, 0xd0, 0xe7, 0x84, 0xf3, 0x84, 0xe6, 0x9a,
	0xa9, 0x86, 0xe8, 0x10, 0x7a, 0x37, 0x94, 0x8b, 0xcb, 0x58, 0x32, 0x0d, 0xb1, 0x46, 0xc8, 0x92,
	0xca, 0x6d, 0x53, 0x26, 0xa5, 0x09, 0x0c, 0xe0, 0x2f, 0xff, 0x83, 0xb1, 0x72, 0x1e, 0x88, 0x1b,
	0x4d, 0x29, 0x63, 0xf7, 0x05, 0x8c, 0x24, 0x27, 0x2f, 0x68, 0xce, 0x49, 0x55, 0x12, 0x07, 0x22,
	0x90, 0x07, 0xf7, 0xb0, 0x8c, 0xdd, 0xd7, 0x70, 0x30, 0xa5, 0x41, 0xac, 0x2e, 0xa8, 0xee, 0x7e,
	0x08, 0x3d, 0x75, 0x15, 0xba, 0xb9, 0x46, 0xae, 0x07, 0xa8, 0x5d, 0xac, 0x69, 0x6d, 0xe8, 0x07,
	0x71, 0xcc, 0x08, 0xe7, 0xb5, 0x56, 0x0d, 0xdd, 0x2f, 0xd0, 0xff, 0xb7, 0x21, 0x07, 0x06, 0xcb,
	0x32, 0x8f, 0xe4, 0x3b, 0x28, 0x4b, 0x0d, 0x6e, 0x14, 0x9b, 0x2d, 0xc5, 0x3f, 0x0d, 0x18, 0xb4,
	0x7b, 0xf3, 0x32, 0x8a, 0xea, 0xde, 0x03, 0x5c, 0xc3, 0x47, 0x69, 0x1d, 0x18, 0x10, 0xc6, 0x28,
	0x9b, 0x35, 0x4f, 0xd0, 0xe0, 0xea, 0x5b, 0x46, 0xe3, 0x64, 0x99, 0x90, 0xd8, 0xde, 0x95, 0x94,
	0x0d, 0x6e, 0xe4, 0x74, 0xb7, 0x72, 0x26, 0xbf, 0x3a, 0x30, 0x6c, 0x56, 0x01, 0x7d, 0xd8, 0x8e,
	0xe2, 0xd3, 0x87, 0x96, 0xc4, 0x79, 0x30, 0x7b, 0x62, 0x9c, 0x1a, 0xe8, 0x2d, 0x80, 0xba, 0x58,
	0x3f, 0x48, 0x53, 0xf4, 0xac, 0xaa, 0xbb, 0x37, 0xb6, 0xce, 0x9e, 0x9a, 0x44, 0xed, 0xfe, 0x18,
	0xcc, 0x29, 0x5d, 0xa1, 0x7d, 0xc9, 0xd9, 0x8c, 0xa3, 0x33, 0xac, 0xf0, 0x79, 0xb5, 0xd9, 0xc8,
	0x85, 0xee, 0x82, 0x25, 0xb9, 0x78, 0xac, 0xe6, 0x15, 0xf4, 0x2e, 0x88, 0xf0, 0x97, 0x9a, 0x68,
	0x3b, 0x85, 0xce, 0x93, 0x06, 0xeb, 0x86, 0x9f, 0xaa, 0xb1, 0xaf, 0x07, 0x40, 0x69, 0xbc, 0x37,
	0x3d, 0xce, 0xe1, 0xdd, 0xb4, 0x3a, 0x3c, 0x79, 0x0f, 0x96, 0x2e, 0x59, 0x30, 0x5a, 0xbd, 0x11,
	0x65, 0xe8, 0x25, 0xf4, 0x35, 0x40, 0xed, 0x25, 0xfb, 0xdb, 0xe7, 0xd9, 0xe4, 0xdb, 0xe9, 0x2a,
	0x11, 0x37, 0x65, 0xe8, 0x45, 0x34, 0x1b, 0x47, 0x29, 0x2d, 0xe3, 0x82, 0x25, 0xb7, 0x41, 0xb4,
	0x49, 0x83, 0x90, 0x8f, 0x7f, 0x04, 0x82, 0xb0, 0x8c, 0xa4, 0x34, 0x1f, 0x73, 0xc2, 0x6e, 0x09,
	0x1b, 0x17, 0x61, 0xd8, 0x93, 0x3f, 0xb5, 0x77, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x8b,
	0x8b, 0x1d, 0xf5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LifecycleClient is the client API for Lifecycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LifecycleClient interface {
	// Connect sends the initial request to the server to connect. Then
	// the module waits for lifecycle management messages from server LifecycleRequest
	// stream.
	Connect(ctx context.Context, opts ...grpc.CallOption) (Lifecycle_ConnectClient, error)
	// Make a module call. If the module call runs, but the command returns
	// an errors (e.g. runs a command on a host, but that command returns error), the
	// error information is returned in Response. If somehow the execution of
	// the function fails (e.g. cannot dial to host), that is returned as grpc error.
	ModuleCall(ctx context.Context, in *ModuleWorkRequest, opts ...grpc.CallOption) (*Response, error)
	// Log for a host
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error)
	// Print a msg on server console
	Print(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error)
	// Get configuration
	GetCfg(ctx context.Context, in *CfgRequest, opts ...grpc.CallOption) (*CfgResponse, error)
	// Loads a module by its name, and returns the GRPC location for the module
	// Use this to setup a direct GRPC link to the module
	LoadModule(ctx context.Context, in *LoadModuleRequest, opts ...grpc.CallOption) (*LoadModuleResponse, error)
}

type lifecycleClient struct {
	cc *grpc.ClientConn
}

func NewLifecycleClient(cc *grpc.ClientConn) LifecycleClient {
	return &lifecycleClient{cc}
}

func (c *lifecycleClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Lifecycle_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Lifecycle_serviceDesc.Streams[0], "/pb.Lifecycle/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &lifecycleConnectClient{stream}
	return x, nil
}

type Lifecycle_ConnectClient interface {
	Send(*LifecycleRequest) error
	Recv() (*LifecycleRequest, error)
	grpc.ClientStream
}

type lifecycleConnectClient struct {
	grpc.ClientStream
}

func (x *lifecycleConnectClient) Send(m *LifecycleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lifecycleConnectClient) Recv() (*LifecycleRequest, error) {
	m := new(LifecycleRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lifecycleClient) ModuleCall(ctx context.Context, in *ModuleWorkRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Lifecycle/ModuleCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Lifecycle/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleClient) Print(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Lifecycle/Print", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleClient) GetCfg(ctx context.Context, in *CfgRequest, opts ...grpc.CallOption) (*CfgResponse, error) {
	out := new(CfgResponse)
	err := c.cc.Invoke(ctx, "/pb.Lifecycle/GetCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleClient) LoadModule(ctx context.Context, in *LoadModuleRequest, opts ...grpc.CallOption) (*LoadModuleResponse, error) {
	out := new(LoadModuleResponse)
	err := c.cc.Invoke(ctx, "/pb.Lifecycle/LoadModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifecycleServer is the server API for Lifecycle service.
type LifecycleServer interface {
	// Connect sends the initial request to the server to connect. Then
	// the module waits for lifecycle management messages from server LifecycleRequest
	// stream.
	Connect(Lifecycle_ConnectServer) error
	// Make a module call. If the module call runs, but the command returns
	// an errors (e.g. runs a command on a host, but that command returns error), the
	// error information is returned in Response. If somehow the execution of
	// the function fails (e.g. cannot dial to host), that is returned as grpc error.
	ModuleCall(context.Context, *ModuleWorkRequest) (*Response, error)
	// Log for a host
	Log(context.Context, *LogRequest) (*Empty, error)
	// Print a msg on server console
	Print(context.Context, *LogRequest) (*Empty, error)
	// Get configuration
	GetCfg(context.Context, *CfgRequest) (*CfgResponse, error)
	// Loads a module by its name, and returns the GRPC location for the module
	// Use this to setup a direct GRPC link to the module
	LoadModule(context.Context, *LoadModuleRequest) (*LoadModuleResponse, error)
}

func RegisterLifecycleServer(s *grpc.Server, srv LifecycleServer) {
	s.RegisterService(&_Lifecycle_serviceDesc, srv)
}

func _Lifecycle_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LifecycleServer).Connect(&lifecycleConnectServer{stream})
}

type Lifecycle_ConnectServer interface {
	Send(*LifecycleRequest) error
	Recv() (*LifecycleRequest, error)
	grpc.ServerStream
}

type lifecycleConnectServer struct {
	grpc.ServerStream
}

func (x *lifecycleConnectServer) Send(m *LifecycleRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lifecycleConnectServer) Recv() (*LifecycleRequest, error) {
	m := new(LifecycleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Lifecycle_ModuleCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).ModuleCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lifecycle/ModuleCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).ModuleCall(ctx, req.(*ModuleWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lifecycle_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lifecycle/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lifecycle_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lifecycle/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).Print(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lifecycle_GetCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).GetCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lifecycle/GetCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).GetCfg(ctx, req.(*CfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lifecycle_LoadModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).LoadModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lifecycle/LoadModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).LoadModule(ctx, req.(*LoadModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lifecycle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Lifecycle",
	HandlerType: (*LifecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModuleCall",
			Handler:    _Lifecycle_ModuleCall_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Lifecycle_Log_Handler,
		},
		{
			MethodName: "Print",
			Handler:    _Lifecycle_Print_Handler,
		},
		{
			MethodName: "GetCfg",
			Handler:    _Lifecycle_GetCfg_Handler,
		},
		{
			MethodName: "LoadModule",
			Handler:    _Lifecycle_LoadModule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Lifecycle_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "module.proto",
}

// RequestProcessorClient is the client API for RequestProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestProcessorClient interface {
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type requestProcessorClient struct {
	cc *grpc.ClientConn
}

func NewRequestProcessorClient(cc *grpc.ClientConn) RequestProcessorClient {
	return &requestProcessorClient{cc}
}

func (c *requestProcessorClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.RequestProcessor/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestProcessorServer is the server API for RequestProcessor service.
type RequestProcessorServer interface {
	Process(context.Context, *Request) (*Response, error)
}

func RegisterRequestProcessorServer(s *grpc.Server, srv RequestProcessorServer) {
	s.RegisterService(&_RequestProcessor_serviceDesc, srv)
}

func _RequestProcessor_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestProcessorServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RequestProcessor/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestProcessorServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RequestProcessor",
	HandlerType: (*RequestProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _RequestProcessor_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module.proto",
}
