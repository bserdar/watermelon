// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// InvId contains an inventory id
type InvId struct {
	// id identifies a set of hosts. id="all" is the inventory containing
	// all known hosts
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvId) Reset()         { *m = InvId{} }
func (m *InvId) String() string { return proto.CompactTextString(m) }
func (*InvId) ProtoMessage()    {}
func (*InvId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{0}
}

func (m *InvId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvId.Unmarshal(m, b)
}
func (m *InvId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvId.Marshal(b, m, deterministic)
}
func (m *InvId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvId.Merge(m, src)
}
func (m *InvId) XXX_Size() int {
	return xxx_messageInfo_InvId.Size(m)
}
func (m *InvId) XXX_DiscardUnknown() {
	xxx_messageInfo_InvId.DiscardUnknown(m)
}

var xxx_messageInfo_InvId proto.InternalMessageInfo

func (m *InvId) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// InvIdRequest contains an inventory id
type InvIdRequest struct {
	// id identifies a set of hosts. id="all" is the inventory containing
	// all known hosts
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Session              string   `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvIdRequest) Reset()         { *m = InvIdRequest{} }
func (m *InvIdRequest) String() string { return proto.CompactTextString(m) }
func (*InvIdRequest) ProtoMessage()    {}
func (*InvIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{1}
}

func (m *InvIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvIdRequest.Unmarshal(m, b)
}
func (m *InvIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvIdRequest.Marshal(b, m, deterministic)
}
func (m *InvIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvIdRequest.Merge(m, src)
}
func (m *InvIdRequest) XXX_Size() int {
	return xxx_messageInfo_InvIdRequest.Size(m)
}
func (m *InvIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvIdRequest proto.InternalMessageInfo

func (m *InvIdRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InvIdRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

// InvSelectRequest is used to select a subset of hosts from an inventory
type InvSelectRequest struct {
	// Select from which inventory
	From string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	// Describe how to select from the inventory. Hosts
	// matching all these selectors will be included
	Sel                  []*Selector `protobuf:"bytes,3,rep,name=Sel,proto3" json:"Sel,omitempty"`
	Session              string      `protobuf:"bytes,4,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InvSelectRequest) Reset()         { *m = InvSelectRequest{} }
func (m *InvSelectRequest) String() string { return proto.CompactTextString(m) }
func (*InvSelectRequest) ProtoMessage()    {}
func (*InvSelectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{2}
}

func (m *InvSelectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvSelectRequest.Unmarshal(m, b)
}
func (m *InvSelectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvSelectRequest.Marshal(b, m, deterministic)
}
func (m *InvSelectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvSelectRequest.Merge(m, src)
}
func (m *InvSelectRequest) XXX_Size() int {
	return xxx_messageInfo_InvSelectRequest.Size(m)
}
func (m *InvSelectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvSelectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvSelectRequest proto.InternalMessageInfo

func (m *InvSelectRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *InvSelectRequest) GetSel() []*Selector {
	if m != nil {
		return m.Sel
	}
	return nil
}

func (m *InvSelectRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

// LabelSet defines a set of labels to use in a host selector
type LabelSet struct {
	Labels               []string `protobuf:"bytes,1,rep,name=Labels,proto3" json:"Labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelSet) Reset()         { *m = LabelSet{} }
func (m *LabelSet) String() string { return proto.CompactTextString(m) }
func (*LabelSet) ProtoMessage()    {}
func (*LabelSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{3}
}

func (m *LabelSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelSet.Unmarshal(m, b)
}
func (m *LabelSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelSet.Marshal(b, m, deterministic)
}
func (m *LabelSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelSet.Merge(m, src)
}
func (m *LabelSet) XXX_Size() int {
	return xxx_messageInfo_LabelSet.Size(m)
}
func (m *LabelSet) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelSet.DiscardUnknown(m)
}

var xxx_messageInfo_LabelSet proto.InternalMessageInfo

func (m *LabelSet) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// HostIdSet defines a set of host ids to use in a host selector
type HostIdSet struct {
	IDs                  []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostIdSet) Reset()         { *m = HostIdSet{} }
func (m *HostIdSet) String() string { return proto.CompactTextString(m) }
func (*HostIdSet) ProtoMessage()    {}
func (*HostIdSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{4}
}

func (m *HostIdSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostIdSet.Unmarshal(m, b)
}
func (m *HostIdSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostIdSet.Marshal(b, m, deterministic)
}
func (m *HostIdSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostIdSet.Merge(m, src)
}
func (m *HostIdSet) XXX_Size() int {
	return xxx_messageInfo_HostIdSet.Size(m)
}
func (m *HostIdSet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostIdSet.DiscardUnknown(m)
}

var xxx_messageInfo_HostIdSet proto.InternalMessageInfo

func (m *HostIdSet) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

// PropertySet defines a set of property key-value pairs to select hosts
type PropertySet struct {
	Properties           []*PropertySet_KVS `protobuf:"bytes,1,rep,name=Properties,proto3" json:"Properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PropertySet) Reset()         { *m = PropertySet{} }
func (m *PropertySet) String() string { return proto.CompactTextString(m) }
func (*PropertySet) ProtoMessage()    {}
func (*PropertySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{5}
}

func (m *PropertySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertySet.Unmarshal(m, b)
}
func (m *PropertySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertySet.Marshal(b, m, deterministic)
}
func (m *PropertySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertySet.Merge(m, src)
}
func (m *PropertySet) XXX_Size() int {
	return xxx_messageInfo_PropertySet.Size(m)
}
func (m *PropertySet) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertySet.DiscardUnknown(m)
}

var xxx_messageInfo_PropertySet proto.InternalMessageInfo

func (m *PropertySet) GetProperties() []*PropertySet_KVS {
	if m != nil {
		return m.Properties
	}
	return nil
}

type PropertySet_KVS struct {
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Select hosts that has any of the given values for the key
	Values               []string `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropertySet_KVS) Reset()         { *m = PropertySet_KVS{} }
func (m *PropertySet_KVS) String() string { return proto.CompactTextString(m) }
func (*PropertySet_KVS) ProtoMessage()    {}
func (*PropertySet_KVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{5, 0}
}

func (m *PropertySet_KVS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertySet_KVS.Unmarshal(m, b)
}
func (m *PropertySet_KVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertySet_KVS.Marshal(b, m, deterministic)
}
func (m *PropertySet_KVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertySet_KVS.Merge(m, src)
}
func (m *PropertySet_KVS) XXX_Size() int {
	return xxx_messageInfo_PropertySet_KVS.Size(m)
}
func (m *PropertySet_KVS) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertySet_KVS.DiscardUnknown(m)
}

var xxx_messageInfo_PropertySet_KVS proto.InternalMessageInfo

func (m *PropertySet_KVS) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PropertySet_KVS) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// Selector contains one of the host selection methods
type Selector struct {
	// Types that are valid to be assigned to Select:
	//	*Selector_HasAllLabels
	//	*Selector_HasAnyLabel
	//	*Selector_HasNoneLabels
	//	*Selector_ByID
	//	*Selector_HasAnyProperty
	//	*Selector_HasAllProperty
	Select               isSelector_Select `protobuf_oneof:"select"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Selector) Reset()         { *m = Selector{} }
func (m *Selector) String() string { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()    {}
func (*Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{6}
}

func (m *Selector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selector.Unmarshal(m, b)
}
func (m *Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selector.Marshal(b, m, deterministic)
}
func (m *Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selector.Merge(m, src)
}
func (m *Selector) XXX_Size() int {
	return xxx_messageInfo_Selector.Size(m)
}
func (m *Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_Selector proto.InternalMessageInfo

type isSelector_Select interface {
	isSelector_Select()
}

type Selector_HasAllLabels struct {
	HasAllLabels *LabelSet `protobuf:"bytes,1,opt,name=HasAllLabels,proto3,oneof"`
}

type Selector_HasAnyLabel struct {
	HasAnyLabel *LabelSet `protobuf:"bytes,2,opt,name=HasAnyLabel,proto3,oneof"`
}

type Selector_HasNoneLabels struct {
	HasNoneLabels *LabelSet `protobuf:"bytes,3,opt,name=HasNoneLabels,proto3,oneof"`
}

type Selector_ByID struct {
	ByID *HostIdSet `protobuf:"bytes,4,opt,name=ByID,proto3,oneof"`
}

type Selector_HasAnyProperty struct {
	HasAnyProperty *PropertySet `protobuf:"bytes,6,opt,name=HasAnyProperty,proto3,oneof"`
}

type Selector_HasAllProperty struct {
	HasAllProperty *PropertySet `protobuf:"bytes,7,opt,name=HasAllProperty,proto3,oneof"`
}

func (*Selector_HasAllLabels) isSelector_Select() {}

func (*Selector_HasAnyLabel) isSelector_Select() {}

func (*Selector_HasNoneLabels) isSelector_Select() {}

func (*Selector_ByID) isSelector_Select() {}

func (*Selector_HasAnyProperty) isSelector_Select() {}

func (*Selector_HasAllProperty) isSelector_Select() {}

func (m *Selector) GetSelect() isSelector_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *Selector) GetHasAllLabels() *LabelSet {
	if x, ok := m.GetSelect().(*Selector_HasAllLabels); ok {
		return x.HasAllLabels
	}
	return nil
}

func (m *Selector) GetHasAnyLabel() *LabelSet {
	if x, ok := m.GetSelect().(*Selector_HasAnyLabel); ok {
		return x.HasAnyLabel
	}
	return nil
}

func (m *Selector) GetHasNoneLabels() *LabelSet {
	if x, ok := m.GetSelect().(*Selector_HasNoneLabels); ok {
		return x.HasNoneLabels
	}
	return nil
}

func (m *Selector) GetByID() *HostIdSet {
	if x, ok := m.GetSelect().(*Selector_ByID); ok {
		return x.ByID
	}
	return nil
}

func (m *Selector) GetHasAnyProperty() *PropertySet {
	if x, ok := m.GetSelect().(*Selector_HasAnyProperty); ok {
		return x.HasAnyProperty
	}
	return nil
}

func (m *Selector) GetHasAllProperty() *PropertySet {
	if x, ok := m.GetSelect().(*Selector_HasAllProperty); ok {
		return x.HasAllProperty
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Selector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Selector_OneofMarshaler, _Selector_OneofUnmarshaler, _Selector_OneofSizer, []interface{}{
		(*Selector_HasAllLabels)(nil),
		(*Selector_HasAnyLabel)(nil),
		(*Selector_HasNoneLabels)(nil),
		(*Selector_ByID)(nil),
		(*Selector_HasAnyProperty)(nil),
		(*Selector_HasAllProperty)(nil),
	}
}

func _Selector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Selector)
	// select
	switch x := m.Select.(type) {
	case *Selector_HasAllLabels:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasAllLabels); err != nil {
			return err
		}
	case *Selector_HasAnyLabel:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasAnyLabel); err != nil {
			return err
		}
	case *Selector_HasNoneLabels:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasNoneLabels); err != nil {
			return err
		}
	case *Selector_ByID:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ByID); err != nil {
			return err
		}
	case *Selector_HasAnyProperty:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasAnyProperty); err != nil {
			return err
		}
	case *Selector_HasAllProperty:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasAllProperty); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Selector.Select has unexpected type %T", x)
	}
	return nil
}

func _Selector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Selector)
	switch tag {
	case 1: // select.HasAllLabels
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LabelSet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_HasAllLabels{msg}
		return true, err
	case 2: // select.HasAnyLabel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LabelSet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_HasAnyLabel{msg}
		return true, err
	case 3: // select.HasNoneLabels
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LabelSet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_HasNoneLabels{msg}
		return true, err
	case 4: // select.ByID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostIdSet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_ByID{msg}
		return true, err
	case 6: // select.HasAnyProperty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PropertySet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_HasAnyProperty{msg}
		return true, err
	case 7: // select.HasAllProperty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PropertySet)
		err := b.DecodeMessage(msg)
		m.Select = &Selector_HasAllProperty{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Selector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Selector)
	// select
	switch x := m.Select.(type) {
	case *Selector_HasAllLabels:
		s := proto.Size(x.HasAllLabels)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selector_HasAnyLabel:
		s := proto.Size(x.HasAnyLabel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selector_HasNoneLabels:
		s := proto.Size(x.HasNoneLabels)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selector_ByID:
		s := proto.Size(x.ByID)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selector_HasAnyProperty:
		s := proto.Size(x.HasAnyProperty)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selector_HasAllProperty:
		s := proto.Size(x.HasAllProperty)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InvUnionRequest struct {
	// Combine these inventories
	Sources              []string `protobuf:"bytes,1,rep,name=Sources,proto3" json:"Sources,omitempty"`
	Session              string   `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvUnionRequest) Reset()         { *m = InvUnionRequest{} }
func (m *InvUnionRequest) String() string { return proto.CompactTextString(m) }
func (*InvUnionRequest) ProtoMessage()    {}
func (*InvUnionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{7}
}

func (m *InvUnionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvUnionRequest.Unmarshal(m, b)
}
func (m *InvUnionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvUnionRequest.Marshal(b, m, deterministic)
}
func (m *InvUnionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvUnionRequest.Merge(m, src)
}
func (m *InvUnionRequest) XXX_Size() int {
	return xxx_messageInfo_InvUnionRequest.Size(m)
}
func (m *InvUnionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvUnionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvUnionRequest proto.InternalMessageInfo

func (m *InvUnionRequest) GetSources() []string {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *InvUnionRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

// Add a host to inventory
type InvAddRequest struct {
	Inv                  string     `protobuf:"bytes,1,opt,name=Inv,proto3" json:"Inv,omitempty"`
	Hosts                *HostIdSet `protobuf:"bytes,2,opt,name=Hosts,proto3" json:"Hosts,omitempty"`
	Session              string     `protobuf:"bytes,3,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *InvAddRequest) Reset()         { *m = InvAddRequest{} }
func (m *InvAddRequest) String() string { return proto.CompactTextString(m) }
func (*InvAddRequest) ProtoMessage()    {}
func (*InvAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{8}
}

func (m *InvAddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvAddRequest.Unmarshal(m, b)
}
func (m *InvAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvAddRequest.Marshal(b, m, deterministic)
}
func (m *InvAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvAddRequest.Merge(m, src)
}
func (m *InvAddRequest) XXX_Size() int {
	return xxx_messageInfo_InvAddRequest.Size(m)
}
func (m *InvAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvAddRequest proto.InternalMessageInfo

func (m *InvAddRequest) GetInv() string {
	if m != nil {
		return m.Inv
	}
	return ""
}

func (m *InvAddRequest) GetHosts() *HostIdSet {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *InvAddRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

// HostIds contains a set of host ids
type HostIds struct {
	HostIds              []string `protobuf:"bytes,1,rep,name=HostIds,proto3" json:"HostIds,omitempty"`
	Session              string   `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostIds) Reset()         { *m = HostIds{} }
func (m *HostIds) String() string { return proto.CompactTextString(m) }
func (*HostIds) ProtoMessage()    {}
func (*HostIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{9}
}

func (m *HostIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostIds.Unmarshal(m, b)
}
func (m *HostIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostIds.Marshal(b, m, deterministic)
}
func (m *HostIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostIds.Merge(m, src)
}
func (m *HostIds) XXX_Size() int {
	return xxx_messageInfo_HostIds.Size(m)
}
func (m *HostIds) XXX_DiscardUnknown() {
	xxx_messageInfo_HostIds.DiscardUnknown(m)
}

var xxx_messageInfo_HostIds proto.InternalMessageInfo

func (m *HostIds) GetHostIds() []string {
	if m != nil {
		return m.HostIds
	}
	return nil
}

func (m *HostIds) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

// HostInfos contains a set of host infos
type HostInfos struct {
	// Requested host information
	HostInfos            []*HostInfo `protobuf:"bytes,1,rep,name=HostInfos,proto3" json:"HostInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HostInfos) Reset()         { *m = HostInfos{} }
func (m *HostInfos) String() string { return proto.CompactTextString(m) }
func (*HostInfos) ProtoMessage()    {}
func (*HostInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{10}
}

func (m *HostInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostInfos.Unmarshal(m, b)
}
func (m *HostInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostInfos.Marshal(b, m, deterministic)
}
func (m *HostInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfos.Merge(m, src)
}
func (m *HostInfos) XXX_Size() int {
	return xxx_messageInfo_HostInfos.Size(m)
}
func (m *HostInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfos.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfos proto.InternalMessageInfo

func (m *HostInfos) GetHostInfos() []*HostInfo {
	if m != nil {
		return m.HostInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*InvId)(nil), "pb.InvId")
	proto.RegisterType((*InvIdRequest)(nil), "pb.InvIdRequest")
	proto.RegisterType((*InvSelectRequest)(nil), "pb.InvSelectRequest")
	proto.RegisterType((*LabelSet)(nil), "pb.LabelSet")
	proto.RegisterType((*HostIdSet)(nil), "pb.HostIdSet")
	proto.RegisterType((*PropertySet)(nil), "pb.PropertySet")
	proto.RegisterType((*PropertySet_KVS)(nil), "pb.PropertySet.KVS")
	proto.RegisterType((*Selector)(nil), "pb.Selector")
	proto.RegisterType((*InvUnionRequest)(nil), "pb.InvUnionRequest")
	proto.RegisterType((*InvAddRequest)(nil), "pb.InvAddRequest")
	proto.RegisterType((*HostIds)(nil), "pb.HostIds")
	proto.RegisterType((*HostInfos)(nil), "pb.HostInfos")
}

func init() { proto.RegisterFile("inventory.proto", fileDescriptor_7173caedb7c6ae96) }

var fileDescriptor_7173caedb7c6ae96 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x5f, 0x6f, 0xd3, 0x3c,
	0x14, 0xc6, 0xd7, 0xa6, 0xeb, 0x9f, 0x93, 0x76, 0xdb, 0xeb, 0xbd, 0x82, 0xa8, 0x12, 0xd3, 0x94,
	0x49, 0xb0, 0x31, 0xa9, 0x9d, 0x3a, 0x24, 0xe0, 0x82, 0x8b, 0x4d, 0x1d, 0xd4, 0x1a, 0x20, 0x94,
	0x8a, 0x5d, 0x70, 0x45, 0xd2, 0x9c, 0xb1, 0x8a, 0xd4, 0x0e, 0x71, 0x1a, 0xd4, 0xcf, 0xc8, 0x15,
	0xdf, 0x08, 0xd9, 0xb1, 0x5b, 0xb7, 0x8c, 0xdd, 0xf9, 0xf8, 0xf9, 0x1d, 0x9f, 0xe3, 0x27, 0x27,
	0x86, 0xdd, 0x29, 0x2b, 0x90, 0xe5, 0x3c, 0x5b, 0xf4, 0xd2, 0x8c, 0xe7, 0x9c, 0x54, 0xd3, 0xa8,
	0x0b, 0x77, 0x5c, 0xe4, 0x65, 0xdc, 0x75, 0x71, 0x96, 0xe6, 0x5a, 0xf4, 0x1f, 0xc3, 0x36, 0x65,
	0x05, 0x8d, 0xc9, 0x0e, 0x54, 0xe9, 0xd0, 0xab, 0x1c, 0x56, 0x8e, 0x5b, 0x41, 0x95, 0x0e, 0xfd,
	0x57, 0xd0, 0x56, 0x42, 0x80, 0x3f, 0xe6, 0x28, 0xf2, 0x4d, 0x9d, 0x78, 0xd0, 0x18, 0xa3, 0x10,
	0x53, 0xce, 0xbc, 0xaa, 0xda, 0x34, 0xa1, 0xff, 0x15, 0xf6, 0x28, 0x2b, 0xc6, 0x98, 0xe0, 0x24,
	0x37, 0xd9, 0x04, 0x6a, 0x6f, 0x33, 0x3e, 0xd3, 0xf9, 0x6a, 0x4d, 0x0e, 0xc0, 0x19, 0x63, 0xe2,
	0x39, 0x87, 0xce, 0xb1, 0x3b, 0x68, 0xf7, 0xd2, 0xa8, 0x57, 0xe6, 0xf0, 0x2c, 0x90, 0x82, 0x5d,
	0xa1, 0xb6, 0x5e, 0xc1, 0x87, 0xe6, 0xfb, 0x30, 0xc2, 0x64, 0x8c, 0x39, 0x79, 0x04, 0x75, 0xb5,
	0x16, 0x5e, 0xe5, 0xd0, 0x39, 0x6e, 0x05, 0x3a, 0xf2, 0x9f, 0x40, 0x6b, 0xc4, 0x45, 0x4e, 0x63,
	0x09, 0xed, 0x81, 0x43, 0x87, 0x86, 0x90, 0x4b, 0x5f, 0x80, 0xfb, 0x29, 0xe3, 0x29, 0x66, 0xf9,
	0x42, 0x02, 0xe7, 0x00, 0x3a, 0x9c, 0x62, 0xc9, 0xb9, 0x83, 0x7d, 0xd9, 0x92, 0x05, 0xf5, 0xae,
	0x6f, 0xc6, 0x81, 0x85, 0x75, 0xfb, 0xe0, 0x5c, 0xdf, 0x8c, 0xe5, 0xe1, 0xd7, 0xb8, 0xd0, 0x57,
	0x93, 0x4b, 0xd9, 0xd3, 0x4d, 0x98, 0xcc, 0x51, 0x78, 0xd5, 0xb2, 0xa7, 0x32, 0xf2, 0x7f, 0x55,
	0xa1, 0x69, 0xee, 0x48, 0x06, 0xd0, 0x1e, 0x85, 0xe2, 0x22, 0x49, 0x96, 0xed, 0x57, 0x8c, 0x0f,
	0xe6, 0x72, 0xa3, 0xad, 0x60, 0x8d, 0x21, 0x67, 0xe0, 0xca, 0x98, 0x2d, 0x54, 0xac, 0x8c, 0xff,
	0x3b, 0xc5, 0x46, 0xc8, 0x0b, 0xe8, 0x8c, 0x42, 0xf1, 0x91, 0x33, 0xd4, 0x65, 0x9c, 0x7b, 0x73,
	0xd6, 0x21, 0x72, 0x04, 0xb5, 0xcb, 0x05, 0x1d, 0x2a, 0xdf, 0xdd, 0x41, 0x47, 0xc2, 0x4b, 0x33,
	0x47, 0x5b, 0x81, 0x12, 0xc9, 0x6b, 0xd8, 0x29, 0x2b, 0x19, 0x8f, 0xbc, 0xba, 0xc2, 0x77, 0x37,
	0x7c, 0x1b, 0x6d, 0x05, 0x1b, 0xa0, 0x49, 0x4d, 0x92, 0x65, 0x6a, 0xe3, 0xc1, 0xd4, 0x15, 0x78,
	0xd9, 0x84, 0xba, 0x50, 0x16, 0xfa, 0x57, 0xb0, 0x4b, 0x59, 0xf1, 0x99, 0x4d, 0x39, 0x33, 0x63,
	0x26, 0x47, 0x86, 0xcf, 0xb3, 0x09, 0x9a, 0x6f, 0x6d, 0xc2, 0x07, 0xc7, 0xb5, 0x43, 0x59, 0x71,
	0x11, 0x2f, 0x27, 0x5d, 0x0e, 0x0b, 0x2b, 0xcc, 0xf7, 0xa4, 0xac, 0x20, 0x47, 0xb0, 0x2d, 0xaf,
	0x2f, 0xb4, 0xe1, 0xeb, 0x7e, 0x04, 0xa5, 0x66, 0x57, 0x70, 0xd6, 0x2b, 0xbc, 0x81, 0x46, 0x49,
	0x2b, 0x48, 0x2f, 0x4d, 0x83, 0x96, 0xf2, 0x8f, 0x06, 0x5f, 0xea, 0x49, 0x66, 0xb7, 0x5c, 0x90,
	0xe7, 0x56, 0xa0, 0xe7, 0xb4, 0xbd, 0x6c, 0x87, 0xdd, 0xf2, 0x60, 0x25, 0x0f, 0x7e, 0x57, 0xa1,
	0x45, 0xcd, 0x63, 0x40, 0x4e, 0xa0, 0x5e, 0xce, 0x1e, 0xf9, 0x5f, 0x26, 0x6c, 0xfe, 0xa2, 0xdd,
	0x96, 0xde, 0xa5, 0x31, 0x79, 0x06, 0xdb, 0xca, 0x56, 0xb2, 0xaf, 0xf7, 0x6c, 0x93, 0x6d, 0xf0,
	0x00, 0x6a, 0x1f, 0xc2, 0xef, 0x48, 0xdc, 0x95, 0x23, 0xc2, 0xd6, 0x8f, 0xc0, 0xb9, 0x88, 0x63,
	0xf2, 0x9f, 0xde, 0x59, 0x99, 0x6c, 0x43, 0xa7, 0x00, 0xef, 0x30, 0x37, 0x3e, 0xec, 0x2d, 0x05,
	0x83, 0xda, 0x87, 0x93, 0x13, 0x70, 0x0d, 0xcc, 0x6e, 0xf9, 0x7a, 0xe1, 0x8e, 0x6d, 0x84, 0x20,
	0xa7, 0xd0, 0xd4, 0xe8, 0x7d, 0xa7, 0x6e, 0xc0, 0x4f, 0xa1, 0x11, 0x60, 0x82, 0xa1, 0xc0, 0x7b,
	0x58, 0xd5, 0xec, 0x95, 0x7c, 0x35, 0x2f, 0x07, 0x5f, 0xce, 0xbe, 0x4d, 0xf3, 0xbb, 0x79, 0xd4,
	0x9b, 0xf0, 0x59, 0x7f, 0x92, 0xf0, 0x79, 0x9c, 0x66, 0xd3, 0x22, 0x9c, 0x2c, 0x92, 0x30, 0x12,
	0xfd, 0x9f, 0x61, 0x8e, 0xd9, 0x0c, 0x13, 0xce, 0xfa, 0x02, 0xb3, 0x02, 0xb3, 0x7e, 0x1a, 0x45,
	0x75, 0xf5, 0xd4, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x65, 0x23, 0xf1, 0x21, 0x9a, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// Selects a subset of an inventory based on the given criteria, and
	// returns a new inventory id representing the subset
	Select(ctx context.Context, in *InvSelectRequest, opts ...grpc.CallOption) (*InvId, error)
	// Union takes a union of a set of inventories and returns a new inventory
	// containing all the hosts in the combined inventories
	Union(ctx context.Context, in *InvUnionRequest, opts ...grpc.CallOption) (*InvId, error)
	// Make creates a new inventory containing the given hosts
	Make(ctx context.Context, in *HostIds, opts ...grpc.CallOption) (*InvId, error)
	// Adds new hosts to an inventory
	Add(ctx context.Context, in *InvAddRequest, opts ...grpc.CallOption) (*InvId, error)
	// Returns the host ids for all the hosts in an inventory
	GetHostIds(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*HostIds, error)
	// Returns information about some hosts
	GetHostInfo(ctx context.Context, in *HostIds, opts ...grpc.CallOption) (*HostInfos, error)
	// Returns all hosts in an inventory
	GetHosts(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*HostInfos, error)
	// Release notifies the server that this inventory is no longer needed
	Release(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) Select(ctx context.Context, in *InvSelectRequest, opts ...grpc.CallOption) (*InvId, error) {
	out := new(InvId)
	err := c.cc.Invoke(ctx, "/pb.Inventory/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Union(ctx context.Context, in *InvUnionRequest, opts ...grpc.CallOption) (*InvId, error) {
	out := new(InvId)
	err := c.cc.Invoke(ctx, "/pb.Inventory/Union", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Make(ctx context.Context, in *HostIds, opts ...grpc.CallOption) (*InvId, error) {
	out := new(InvId)
	err := c.cc.Invoke(ctx, "/pb.Inventory/Make", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Add(ctx context.Context, in *InvAddRequest, opts ...grpc.CallOption) (*InvId, error) {
	out := new(InvId)
	err := c.cc.Invoke(ctx, "/pb.Inventory/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetHostIds(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*HostIds, error) {
	out := new(HostIds)
	err := c.cc.Invoke(ctx, "/pb.Inventory/GetHostIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetHostInfo(ctx context.Context, in *HostIds, opts ...grpc.CallOption) (*HostInfos, error) {
	out := new(HostInfos)
	err := c.cc.Invoke(ctx, "/pb.Inventory/GetHostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetHosts(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*HostInfos, error) {
	out := new(HostInfos)
	err := c.cc.Invoke(ctx, "/pb.Inventory/GetHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Release(ctx context.Context, in *InvIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Inventory/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// Selects a subset of an inventory based on the given criteria, and
	// returns a new inventory id representing the subset
	Select(context.Context, *InvSelectRequest) (*InvId, error)
	// Union takes a union of a set of inventories and returns a new inventory
	// containing all the hosts in the combined inventories
	Union(context.Context, *InvUnionRequest) (*InvId, error)
	// Make creates a new inventory containing the given hosts
	Make(context.Context, *HostIds) (*InvId, error)
	// Adds new hosts to an inventory
	Add(context.Context, *InvAddRequest) (*InvId, error)
	// Returns the host ids for all the hosts in an inventory
	GetHostIds(context.Context, *InvIdRequest) (*HostIds, error)
	// Returns information about some hosts
	GetHostInfo(context.Context, *HostIds) (*HostInfos, error)
	// Returns all hosts in an inventory
	GetHosts(context.Context, *InvIdRequest) (*HostInfos, error)
	// Release notifies the server that this inventory is no longer needed
	Release(context.Context, *InvIdRequest) (*Empty, error)
}

func RegisterInventoryServer(s *grpc.Server, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Select(ctx, req.(*InvSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Union_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Union(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/Union",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Union(ctx, req.(*InvUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Make_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Make(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/Make",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Make(ctx, req.(*HostIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Add(ctx, req.(*InvAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetHostIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetHostIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/GetHostIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetHostIds(ctx, req.(*InvIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/GetHostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetHostInfo(ctx, req.(*HostIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/GetHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetHosts(ctx, req.(*InvIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Inventory/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Release(ctx, req.(*InvIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Select",
			Handler:    _Inventory_Select_Handler,
		},
		{
			MethodName: "Union",
			Handler:    _Inventory_Union_Handler,
		},
		{
			MethodName: "Make",
			Handler:    _Inventory_Make_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Inventory_Add_Handler,
		},
		{
			MethodName: "GetHostIds",
			Handler:    _Inventory_GetHostIds_Handler,
		},
		{
			MethodName: "GetHostInfo",
			Handler:    _Inventory_GetHostInfo_Handler,
		},
		{
			MethodName: "GetHosts",
			Handler:    _Inventory_GetHosts_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Inventory_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
